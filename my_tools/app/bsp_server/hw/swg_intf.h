#ifndef __SWG_INTF_H_
#define __SWG_INTF_H_

/*************************************************
文件描述  : SWG 设备对外接口
**************************************************/

/*
 *typedef enum mod_brd_name_e
 *{
 *    MB_NAME_UNKOWN = 0,
 *    MB_SWG_1004_BASE,   [> 4口模块板, 目前无此硬件 <]
 *    MB_SWG_1008_BASE,   [> 8口模块板, 目前无此硬件 <]
 *    MB_SWG_1016_BASE,   [> 16口模块板,实际上目前16口与32口一样, 都是MB_SWG_1032_BASE, 此值预留 <]
 *    MB_SWG_1032_BASE,   [> 32口模块板，虽然命令为1032,但硬件上只有16口，32口由2个此模块叠加而得，目前已有硬件 <] 
 *    MB_SWG_VS_USB_M35,      [> 可插拔4口USB模块, 目前已有硬件 <]
 *}MOD_BRD_NAME_E;
 *
 *typedef enum swg_name_e
 *{
 *    SWG_DEV_UNKOWN = 0,
 *    SWG_DEV_1004,       [> 4口无线网关 <]
 *    SWG_DEV_1008,       [> 8口无线网关 <]
 *    SWG_DEV_1016,       [> 16口无线网关 <] 
 *    SWG_DEV_1032,       [> 32口无线网关 <] 
 *    SWG_DEV_1064,       [> 64口无线网关 <] 
 *    SWG_DEV_VS_USB_1020,[> 20口可插拔USB模块无线网关 1U机箱<]
 *    SWG_DEV_VS_USB_1044,[> 44口可插拔USB模块无线网关 2U机箱<]
 *}SWG_NAME_E;
 */

/* 模块板版本信息结构体 */
struct mod_brd_ver_info
{
    int name;   /* 名称, 取值参考枚举 enum mod_brd_name_e */
    /* 软件、硬件版本号定义如下:
     * 第1字节 -- bufix
     * 第2字节 -- minor
     * 第3字节 -- major
     * 即：
     * a - major, b - minor, c - bugfix 
     * #define VERSION_NUMBER(a,b,c) \
     * (((a) << 16) + ((b) << 8) + (c))
     * */
    unsigned long hw_ver;   /* 硬件版本号 */
    unsigned long sw_ver;   /* 软件版本号 */
};

/* SWG 设备版本信息结构体 */
struct swg_ver_info
{
    int name;   /* 名称, 取值参考枚举 enum swg_name_e */
    /* 软件、硬件版本号定义如下:
     * 第1字节 -- bufix
     * 第2字节 -- minor
     * 第3字节 -- major
     * 即：
     * a - major, b - minor, c - bugfix 
     * #define VERSION_NUMBER(a,b,c) \
     * (((a) << 16) + ((b) << 8) + (c))
     * */
    unsigned long version;   /* 版本号 */
};

struct simswitch_ver_info_s{
    unsigned long hw_ver;   /* 硬件版本号 */
    unsigned long sw_ver;   /* 软件版本号 */
};

int swg_device_init(void);
void swg_device_deinit(void);


/*************************************************
  函数描述 : 将全局通道号转为模块板下标和此模块板上的通道号
  输入参数 : dev -- SWG device
             gchan -- 全局通道号（从1开始编号）
  输出参数 : md_idx -- 模块板下标（从1开始编号）
             md_chan -- 此模块板上的通道号（从1开始编号）
  函数返回 :  0 -- 成功
             <0 -- 失败
  作者/时间 : junyu.yang@openvox.cn/2018.02.01
*************************************************/
int swg_gchan_2_mb_idx_chan(int chan, int *md_idx, int *md_chan);

/*************************************************
  函数描述 : 读模块板1个或多个连续的寄存器
  输入参数 : idx -- 模块板编号
             reg -- 起始寄存器号
             num -- 寄存器数量, 大于等于1.
  输出参数 : vals -- 指针，用于存放寄存器值，空间不能少于'num'。
  函数返回 :  0 -- 成功
             <0 -- 失败
*************************************************/
int swg_read_mod_brd_reg(int idx, int reg, int num, int *vals);

/*************************************************
  函数描述 : 写模块板寄存器
  输入参数 : idx -- 模块板编号
             reg -- 寄存器号
             val -- 寄存器值
  函数返回 :  0 -- 成功
             <0 -- 失败
*************************************************/
int swg_write_mod_brd_reg(int idx, int reg, int val);

/*************************************************
  函数描述 : 使能/失能模块SIM卡
  输入参数 : chan -- 通道号, =0xFFFF 表示所有通道
             enable -- >0 使能，
                       =0 失能
  函数返回 :  0 -- 成功, 一个或多个通道操作成功
             <0 -- 失败, 所有通道操作都失败才返回
  备注     : 操作所有通道时，当其中一个失败，仍然操作其通道。
*************************************************/
int swg_sim_card_enable(int chan, int enable);

/*************************************************
  函数描述 : 获取模块SIM卡使能/失能状态
  输入参数 : chan -- 通道号, =0xFFFF 表示所有通道 
  输出参数 : status -- sim状态
                       =1 使能，
                       =0 失能
             当chan指定某一通道时，status[0]返回此通道状态.
             当chan == 0xFFFF指定所有通道时，status[0] ... status[total_chan - 1]
             依次表示通道1到通道total_chan 的状态。此时status必须包含足够空间。
             所有通道数目可由函数 swg_get_total_chan_num() 获得。
  函数返回 :  0 -- 成功, 一个或多个通道操作成功
             <0 -- 失败, 所有通道操作都失败才返回
  备注     : 操作所有通道时，当其中一个失败，仍然操作其通道。
*************************************************/
int swg_get_sim_card_enable_status(int chan,  int *status);

/*************************************************
  函数描述 : 获取模块SIM卡插入状态
  输入参数 : chan -- 通道号, =0xFFFF 表示所有通道
  输出参数 : status -- sim插入状态
                       =1 已插入，
                       =0 未插入
             当chan指定某一通道时，status[0]返回此通道状态.
             当chan == 0xFFFF指定所有通道时，status[0] ... status[total_chan - 1]
             依次表示通道1到通道total_chan的状态。此时status必须包含足够空间。
             所有通道数目可由函数 swg_get_total_chan_num() 获得。
  函数返回 :  0 -- 成功, 一个或多个通道操作成功
             <0 -- 失败, 所有通道操作都失败才返回
  备注     : 操作所有通道时，当其中一个失败，仍然操作其通道。
*************************************************/
int swg_get_sim_card_insert_status(int chan, int *status);

/*************************************************
  函数描述 : 获取模块SIM卡插入事件
  输入参数 : chan -- 通道号, =0xFFFF 表示所有通道
  输出参数 : event -- 事件
                      =1  插入事件
                      =2  拔出事件 
                      其它 未定义
             当chan指定某一通道时，status[0]返回此通道状态.
             当chan == 0xFFFF指定所有通道时，status[0] ... status[total_chan - 1]
             依次表示通道1到通道total_chan的状态。此时status必须包含足够空间。
             所有通道数目可由函数 swg_get_total_chan_num() 获得。
  函数返回 :  0 -- 成功, 一个或多个通道操作成功
             <0 -- 失败, 所有通道操作都失败才返回
  备注     : 操作所有通道时，当其中一个失败，仍然操作其通道。
*************************************************/
int swg_get_sim_card_insert_event(int chan, int *event);

/*************************************************
  函数描述 : 模块开机/关机
  输入参数 : chan -- 通道号, =0xFFFF 表示所有通道
             on -- 开机还是关机
                   >0 开机
                   =0 关机
  函数返回 :  0 -- 成功, 一个或多个通道操作成功
             <0 -- 失败, 所有通道操作都失败才返回
  备注     : 操作所有通道时，当其中一个失败，仍然操作其通道。
*************************************************/
int swg_chan_mod_power_on_off(int chan, int on);

/*************************************************
  函数描述 : 获取通道模块开机/关机状态
  输入参数 : chan -- 通道号, =0xFFFF 表示所有通道
  输出参数 : status -- 开机/关机状态
                       >0 开机
                       =0 关机
             当chan指定某一通道时，status[0]返回此通道状态.
             当chan == 0xFFFF指定所有通道时，status[0] ... status[total_chan - 1]
             依次表示通道1到通道total_chan的状态。此时status必须包含足够空间。
             所有通道数目可由函数 swg_get_total_chan_num() 获得。
  函数返回 :  0 -- 成功, 一个或多个通道操作成功
             <0 -- 失败, 所有通道操作都失败才返回
  备注     : 操作所有通道时，当其中一个失败，仍然操作其通道。
*************************************************/
int swg_get_chan_mod_power_status(int chan, int *status);

/*************************************************
  函数描述 : 给通道模块供电
  输入参数 : chan -- 通道号, =0xFFFF 表示所有通道
             supply -- 供电还是断电
                       >0 供电
                       =0 断电
  函数返回 :  0 -- 成功, 一个或多个通道操作成功
             <0 -- 失败, 所有通道操作都失败才返回
  备注     : 操作所有通道时，当其中一个失败，仍然操作其通道。
             给模块提供电源与否，供电后才能power on
*************************************************/
int swg_chan_mod_vbat_supply(int chan, int supply);

/*************************************************
  函数描述 : 获取通道模块供电状态
  输入参数 : chan -- 通道号, =0xFFFF 表示所有通道
  输出参数 : status -- 供电状态
                       >0 供电
                       =0 断电
             当chan指定某一通道时，status[0]返回此通道状态.
             当chan == 0xFFFF指定所有通道时，status[0] ... status[total_chan - 1]
             依次表示通道1到通道total_chan的状态。此时status必须包含足够空间。
             所有通道数目可由函数 swg_get_total_chan_num() 获得。
  函数返回 :  0 -- 成功, 一个或多个通道操作成功
             <0 -- 失败, 所有通道操作都失败才返回
  备注     : 操作所有通道时，当其中一个失败，仍然操作其通道。
*************************************************/
int swg_get_chan_mod_vbat_status(int chan, int *status);


/*************************************************
  函数描述 : 获取所有通道数目
  函数返回 : >=0 -- 通道数目
             <0  -- 获取失败
*************************************************/
int swg_get_total_chan_num(void);


/*************************************************
  函数描述 : 获取所有模块板数目
  函数返回 : >=0 -- 模块板总数
             <0  -- 获取失败
*************************************************/
int swg_get_total_mod_brd_num(void);

/*************************************************
  函数描述 : 获取模块板UID
  输入参数 : idx --  全局模块板编号, 从1开始编号
             uid_buf -- 存放uid缓冲区
             uid_buf_len -- uid_buf 空间
  函数返回 : >=0 -- 实际获取UID长度
              <0 -- 失败
*************************************************/
int swg_get_mod_brd_uid(int idx, char *uid_buf, int uid_buf_len);

/*************************************************
  函数描述 : 获取模块板版本信息
  输入参数 : idx -- 模块板编号
  输出参数 : info -- 返回版本信息
  函数返回 :  0 -- 成功
             <0 -- 失败
*************************************************/
int swg_get_mod_brd_ver_info(int idx, struct mod_brd_ver_info *info);

/*************************************************
  函数描述 : 获取SWG设备名称
  输出参数 : info -- 返回版本信息
  函数返回 :  0 -- 成功
             <0 -- 失败
*************************************************/
int swg_get_dev_ver_info(struct swg_ver_info *info);

/*************************************************
  函数描述 : 选择升级通道无线模块固件通道
  输入参数 : chan -- 指定升级的通道, =0xFFFF 所有通道都 不 选
  函数返回 :  0 -- 成功
             <0 -- 失败
*************************************************/
int swg_select_upgrade_chan(int chan);

/*************************************************
  函数描述 : 检测升级通道是否已经被选中。
  输入参数 : chan -- 指定检测的通道
  函数返回 :  0 -- 通道没有被选择为升级通道
              1 -- 通道被选择为升级通道
              2 -- 通道不支持选择升级功能
             <0 出错
*************************************************/
int swg_upgrade_chan_is_selected(int chan);

/*************************************************
  函数描述 : 获取模块板复位按键状态
  输入参数 : idx --  全局模块板编号, 从1开始编号
  输出参数 : status --  返回的状态
                        =1 按键按下
                        =0 按键按没有下
  函数返回 :  0 -- 获取成功
             <0 -- 获取失败
*************************************************/
int swg_get_mod_brd_reset_key_status(int idx, int *status);
/*************************************************
  函数描述 : 设置powerkey管脚电平状态
  输入参数 : chann -- 指通道号，=0xFFFF 拉高或拉低所有通道powerkey电平
             press -- 电平状态
                      0 拉低
                      1 拉高
*************************************************/
int swg_chan_mod_powerkey_hign_low(int chan, int level, char *id);

int swg_chan_mod_set_upgrade_status(int chan, int flag, char *id);
/*************************************************
  函数描述 : 设置模块板调试开关
  输入参数 : idx -- 指定模块板编号
			 enable 0--关闭调试开关
			        1--打开调试开关
  函数返回 :  0 -- 设置成功
              <0 -- 设置失败
*************************************************/
int swg_set_debug_uart(int idx, int enable);

/*************************************************
  函数描述 : 设置通道信号灯状态
  输入参数 : chan --通道号,0xFFFF时设置所有通道
             status --led灯状态
  函数返回 : =0 -- 设置成功
             <0 -- 设置失败
*************************************************/
int vs_usb_set_sig_led_map(int chan, int status);

/*************************************************
  函数描述 : 设置通道工作灯状态
  输入参数 : chan --通道号,0xFFFF时设置所有通道
             status --led灯状态
  函数返回 : =0 -- 设置成功
             <0 -- 设置失败
*************************************************/
int vs_usb_set_work_led_map(int chan, int status);

/*************************************************
  函数描述 : 打开或关闭所有led灯,包括sig 红灯、绿灯，work 绿灯
  输入参数 : statues 1--打开
                     0--关闭
  函数返回 : =0 -- 设置成功
             <0 -- 设置失败
*************************************************/
int vs_usb_set_all_led(int status);

/*************************************************
  函数描述 : 打开或关闭所有system led灯，只针对vs-usb设备
  输入参数 : statues 1--打开
                     0--关闭
  函数返回 : =0 -- 设置成功
             <0 -- 设置失败
*************************************************/
int vs_usb_set_mod_sys_led_map(int md, int status);


/*************************************************
  函数描述 : 获取sys type
  函数返回 : 系统类型
*************************************************/
int swg_get_sys_type(void);

/*************************************************
  函数描述 : 定时开机模块
  函数返回 : =0 --设置成功
             <0 --设置失败
*************************************************/
int swg_chan_mod_power_on_module_timer(int chan, int timer);

int swg_set_sim_card_slot(int chan, int slot);

int swg_get_sim_state_all(int chan,  int state[][4]);

int swg_get_sim_state_one(int chan, int card, int *state);

int swg_get_simswitch_info(int index, struct simswitch_ver_info_s *info);
#endif /* __SWG_INTF_H_*/
