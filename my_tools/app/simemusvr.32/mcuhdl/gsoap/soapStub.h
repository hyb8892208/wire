/* soapStub.h
   Generated by gSOAP 2.8.17 from /home/peng/wg32_dev/my_tools/app/simemusvr.32/mcuhdl/gsoap/gsm_mcu_hdl.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20817
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif

#ifdef __cplusplus
extern "C" {
#endif

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_ns__gsm_mcu_rsp_t
#define SOAP_TYPE_ns__gsm_mcu_rsp_t (7)
/* ns:gsm-mcu-rsp-t */
struct ns__gsm_mcu_rsp_t
{
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	int cnt;	/* required element of type xsd:int */
	char *value;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__gsm_simcard_enableResponse
#define SOAP_TYPE_ns__gsm_simcard_enableResponse (10)
/* ns:gsm-simcard-enableResponse */
struct ns__gsm_simcard_enableResponse
{
	int *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__gsm_simcard_enable
#define SOAP_TYPE_ns__gsm_simcard_enable (11)
/* ns:gsm-simcard-enable */
struct ns__gsm_simcard_enable
{
	int chn;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__gsm_simcard_disableResponse
#define SOAP_TYPE_ns__gsm_simcard_disableResponse (13)
/* ns:gsm-simcard-disableResponse */
struct ns__gsm_simcard_disableResponse
{
	int *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__gsm_simcard_disable
#define SOAP_TYPE_ns__gsm_simcard_disable (14)
/* ns:gsm-simcard-disable */
struct ns__gsm_simcard_disable
{
	int chn;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__gsm_get_simcard_status
#define SOAP_TYPE_ns__gsm_get_simcard_status (17)
/* ns:gsm-get-simcard-status */
struct ns__gsm_get_simcard_status
{
	int chn;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__gsm_module_power_onResponse
#define SOAP_TYPE_ns__gsm_module_power_onResponse (19)
/* ns:gsm-module-power-onResponse */
struct ns__gsm_module_power_onResponse
{
	int *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__gsm_module_power_on
#define SOAP_TYPE_ns__gsm_module_power_on (20)
/* ns:gsm-module-power-on */
struct ns__gsm_module_power_on
{
	int chn;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__gsm_module_power_offResponse
#define SOAP_TYPE_ns__gsm_module_power_offResponse (22)
/* ns:gsm-module-power-offResponse */
struct ns__gsm_module_power_offResponse
{
	int *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__gsm_module_power_off
#define SOAP_TYPE_ns__gsm_module_power_off (23)
/* ns:gsm-module-power-off */
struct ns__gsm_module_power_off
{
	int chn;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__gsm_get_module_power_status
#define SOAP_TYPE_ns__gsm_get_module_power_status (25)
/* ns:gsm-get-module-power-status */
struct ns__gsm_get_module_power_status
{
	int chn;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__gsm_module_emerg_offResponse
#define SOAP_TYPE_ns__gsm_module_emerg_offResponse (27)
/* ns:gsm-module-emerg-offResponse */
struct ns__gsm_module_emerg_offResponse
{
	int *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__gsm_module_emerg_off
#define SOAP_TYPE_ns__gsm_module_emerg_off (28)
/* ns:gsm-module-emerg-off */
struct ns__gsm_module_emerg_off
{
	int chn;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__gsm_module_onResponse
#define SOAP_TYPE_ns__gsm_module_onResponse (30)
/* ns:gsm-module-onResponse */
struct ns__gsm_module_onResponse
{
	int *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__gsm_module_on
#define SOAP_TYPE_ns__gsm_module_on (31)
/* ns:gsm-module-on */
struct ns__gsm_module_on
{
	int chn;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__gsm_module_offResponse
#define SOAP_TYPE_ns__gsm_module_offResponse (33)
/* ns:gsm-module-offResponse */
struct ns__gsm_module_offResponse
{
	int *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__gsm_module_off
#define SOAP_TYPE_ns__gsm_module_off (34)
/* ns:gsm-module-off */
struct ns__gsm_module_off
{
	int chn;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__gsm_get_module_status
#define SOAP_TYPE_ns__gsm_get_module_status (36)
/* ns:gsm-get-module-status */
struct ns__gsm_get_module_status
{
	int chn;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__gsm_get_simcard_insert_status
#define SOAP_TYPE_ns__gsm_get_simcard_insert_status (38)
/* ns:gsm-get-simcard-insert-status */
struct ns__gsm_get_simcard_insert_status
{
	int chn;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__gsm_get_gsmboard_insert_status
#define SOAP_TYPE_ns__gsm_get_gsmboard_insert_status (40)
/* ns:gsm-get-gsmboard-insert-status */
struct ns__gsm_get_gsmboard_insert_status
{
	int chn;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__gsm_set_led_controlResponse
#define SOAP_TYPE_ns__gsm_set_led_controlResponse (43)
/* ns:gsm-set-led-controlResponse */
struct ns__gsm_set_led_controlResponse
{
	char **result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__gsm_set_led_control
#define SOAP_TYPE_ns__gsm_set_led_control (44)
/* ns:gsm-set-led-control */
struct ns__gsm_set_led_control
{
	char *buf;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__gsm_get_mcu_versionResponse
#define SOAP_TYPE_ns__gsm_get_mcu_versionResponse (46)
/* ns:gsm-get-mcu-versionResponse */
struct ns__gsm_get_mcu_versionResponse
{
	char **result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__gsm_get_mcu_version
#define SOAP_TYPE_ns__gsm_get_mcu_version (47)
/* ns:gsm-get-mcu-version */
struct ns__gsm_get_mcu_version
{
#ifdef WITH_NOEMPTYSTRUCT
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_ns__gsm_get_mcu_helpResponse
#define SOAP_TYPE_ns__gsm_get_mcu_helpResponse (49)
/* ns:gsm-get-mcu-helpResponse */
struct ns__gsm_get_mcu_helpResponse
{
	char **result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__gsm_get_mcu_help
#define SOAP_TYPE_ns__gsm_get_mcu_help (50)
/* ns:gsm-get-mcu-help */
struct ns__gsm_get_mcu_help
{
#ifdef WITH_NOEMPTYSTRUCT
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_ns__gsm_get_restore_eventResponse
#define SOAP_TYPE_ns__gsm_get_restore_eventResponse (52)
/* ns:gsm-get-restore-eventResponse */
struct ns__gsm_get_restore_eventResponse
{
	char **result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__gsm_get_restore_event
#define SOAP_TYPE_ns__gsm_get_restore_event (53)
/* ns:gsm-get-restore-event */
struct ns__gsm_get_restore_event
{
#ifdef WITH_NOEMPTYSTRUCT
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_ns__gsm_mcu_reg_readResponse
#define SOAP_TYPE_ns__gsm_mcu_reg_readResponse (55)
/* ns:gsm-mcu-reg-readResponse */
struct ns__gsm_mcu_reg_readResponse
{
	char **result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__gsm_mcu_reg_read
#define SOAP_TYPE_ns__gsm_mcu_reg_read (56)
/* ns:gsm-mcu-reg-read */
struct ns__gsm_mcu_reg_read
{
	int brd;	/* required element of type xsd:int */
	int reg;	/* required element of type xsd:int */
	int num;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__gsm_mcu_reg_writeResponse
#define SOAP_TYPE_ns__gsm_mcu_reg_writeResponse (60)
/* ns:gsm-mcu-reg-writeResponse */
struct ns__gsm_mcu_reg_writeResponse
{
	char **result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__gsm_mcu_reg_write
#define SOAP_TYPE_ns__gsm_mcu_reg_write (61)
/* ns:gsm-mcu-reg-write */
struct ns__gsm_mcu_reg_write
{
	int brd;	/* required element of type xsd:int */
	int reg;	/* required element of type xsd:int */
	unsigned char val;	/* required element of type xsd:unsignedByte */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (62)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (63)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (65)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (68)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (69)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Server-Side Operations                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 ns__gsm_simcard_enable(struct soap*, int chn, int *result);

SOAP_FMAC5 int SOAP_FMAC6 ns__gsm_simcard_disable(struct soap*, int chn, int *result);

SOAP_FMAC5 int SOAP_FMAC6 ns__gsm_get_simcard_status(struct soap*, int chn, struct ns__gsm_mcu_rsp_t *result);

SOAP_FMAC5 int SOAP_FMAC6 ns__gsm_module_power_on(struct soap*, int chn, int *result);

SOAP_FMAC5 int SOAP_FMAC6 ns__gsm_module_power_off(struct soap*, int chn, int *result);

SOAP_FMAC5 int SOAP_FMAC6 ns__gsm_get_module_power_status(struct soap*, int chn, struct ns__gsm_mcu_rsp_t *result);

SOAP_FMAC5 int SOAP_FMAC6 ns__gsm_module_emerg_off(struct soap*, int chn, int *result);

SOAP_FMAC5 int SOAP_FMAC6 ns__gsm_module_on(struct soap*, int chn, int *result);

SOAP_FMAC5 int SOAP_FMAC6 ns__gsm_module_off(struct soap*, int chn, int *result);

SOAP_FMAC5 int SOAP_FMAC6 ns__gsm_get_module_status(struct soap*, int chn, struct ns__gsm_mcu_rsp_t *result);

SOAP_FMAC5 int SOAP_FMAC6 ns__gsm_get_simcard_insert_status(struct soap*, int chn, struct ns__gsm_mcu_rsp_t *result);

SOAP_FMAC5 int SOAP_FMAC6 ns__gsm_get_gsmboard_insert_status(struct soap*, int chn, struct ns__gsm_mcu_rsp_t *result);

SOAP_FMAC5 int SOAP_FMAC6 ns__gsm_set_led_control(struct soap*, char *buf, char **result);

SOAP_FMAC5 int SOAP_FMAC6 ns__gsm_get_mcu_version(struct soap*, char **result);

SOAP_FMAC5 int SOAP_FMAC6 ns__gsm_get_mcu_help(struct soap*, char **result);

SOAP_FMAC5 int SOAP_FMAC6 ns__gsm_get_restore_event(struct soap*, char **result);

SOAP_FMAC5 int SOAP_FMAC6 ns__gsm_mcu_reg_read(struct soap*, int brd, int reg, int num, char **result);

SOAP_FMAC5 int SOAP_FMAC6 ns__gsm_mcu_reg_write(struct soap*, int brd, int reg, unsigned char val, char **result);

/******************************************************************************\
 *                                                                            *
 * Server-Side Skeletons to Invoke Service Operations                         *
 *                                                                            *
\******************************************************************************/

SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__gsm_simcard_enable(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__gsm_simcard_disable(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__gsm_get_simcard_status(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__gsm_module_power_on(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__gsm_module_power_off(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__gsm_get_module_power_status(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__gsm_module_emerg_off(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__gsm_module_on(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__gsm_module_off(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__gsm_get_module_status(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__gsm_get_simcard_insert_status(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__gsm_get_gsmboard_insert_status(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__gsm_set_led_control(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__gsm_get_mcu_version(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__gsm_get_mcu_help(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__gsm_get_restore_event(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__gsm_mcu_reg_read(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__gsm_mcu_reg_write(struct soap*);

#ifdef __cplusplus
}
#endif

#endif

/* End of soapStub.h */
